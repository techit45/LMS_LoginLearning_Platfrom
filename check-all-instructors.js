import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  'https://vuitwzisazvikrhtfthh.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ1aXR3emlzYXp2aWtyaHRmdGhoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzOTU4ODIsImV4cCI6MjA2Njk3MTg4Mn0.VXCqythCUualJ7S9jVvnQUYe9BKnfMvbihtZT5c3qyE'
)

async function checkAllInstructors() {
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...\n')

  try {
    // 1. ‡∏î‡∏π‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° student)
    const { data: allUsers, error: allError } = await supabase
      .from('user_profiles')
      .select('user_id, full_name, email, role, is_active')
      .neq('role', 'student')
      .order('full_name')

    if (allError) throw allError

    console.log('üìä ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà student:', allUsers.length, '‡∏Ñ‡∏ô')
    console.log('=' .repeat(60))
    
    allUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.full_name || user.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`)
      console.log(`   ID: ${user.user_id}`)
      console.log(`   Email: ${user.email}`)
      console.log(`   Role: ${user.role}`)
      console.log(`   Active: ${user.is_active}`)
      console.log('')
    })

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô ScheduleGrid
    const instructorMap = new Map()
    const nameSet = new Set()
    
    allUsers.forEach(instructor => {
      const instructorId = instructor.user_id
      const instructorName = instructor.full_name || instructor.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
      
      // Check for both ID and name duplicates
      if (!instructorMap.has(instructorId) && !nameSet.has(instructorName)) {
        instructorMap.set(instructorId, {
          id: instructorId,
          name: instructorName,
          is_active: instructor.is_active
        })
        nameSet.add(instructorName)
      }
    })

    const instructorList = Array.from(instructorMap.values())
    
    console.log('=' .repeat(60))
    console.log('üìã ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏ã‡πâ‡∏≥:', instructorList.length, '‡∏Ñ‡∏ô')
    console.log('‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á:')
    instructorList.forEach((inst, index) => {
      console.log(`${index + 1}. ${inst.name} (${inst.id})`)
    })

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö teaching_courses
    const { data: teachingCourses, error: tcError } = await supabase
      .from('teaching_courses')
      .select('id, name, created_by')
      .order('name')

    if (!tcError) {
      console.log('\n' + '=' .repeat(60))
      console.log('üìö Teaching Courses:', teachingCourses.length, '‡∏ß‡∏¥‡∏ä‡∏≤')
      
      // ‡∏´‡∏≤ unique instructors ‡∏à‡∏≤‡∏Å courses
      const uniqueInstructorIds = [...new Set(teachingCourses.map(c => c.created_by).filter(Boolean))]
      console.log('Unique instructor IDs ‡πÉ‡∏ô courses:', uniqueInstructorIds.length, '‡∏Ñ‡∏ô')
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message)
  }
}

checkAllInstructors()