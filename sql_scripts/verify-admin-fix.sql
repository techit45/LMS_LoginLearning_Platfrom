-- ==========================================
-- ADMIN VISIBILITY FIX - VERIFICATION SCRIPT
-- ==========================================
-- 
-- This script verifies that the admin user visibility fix
-- has been applied correctly and is working as expected.
--
-- Run this AFTER applying 08-fix-admin-user-visibility.sql
--
-- Author: Claude Database Specialist
-- Date: 2025-07-31
-- ==========================================

\echo 'üîç VERIFYING ADMIN VISIBILITY FIX...'
\echo ''

-- ==========================================
-- TEST 1: POLICY VERIFICATION
-- ==========================================

\echo 'üìã TEST 1: Checking RLS Policies...'

SELECT 
  '‚úÖ USER_PROFILES POLICIES:' as test_name,
  COUNT(*) as policy_count,
  CASE 
    WHEN COUNT(*) >= 5 THEN '‚úÖ Sufficient policies created'
    ELSE '‚ùå Missing policies'
  END as status
FROM pg_policies 
WHERE tablename = 'user_profiles' AND schemaname = 'public';

-- List specific policies
SELECT 
  'üìù POLICY DETAILS:' as section,
  policyname as policy_name,
  cmd as applies_to,
  CASE 
    WHEN policyname LIKE '%super_admin%' THEN 'üëë'
    WHEN policyname LIKE '%admin%' THEN 'üë®‚Äçüíº'
    WHEN policyname LIKE '%instructor%' THEN 'üë®‚Äçüè´'
    WHEN policyname LIKE '%own%' THEN 'üë§'
    ELSE '‚ùì'
  END as icon
FROM pg_policies 
WHERE tablename = 'user_profiles' AND schemaname = 'public'
ORDER BY policyname;

\echo ''

-- ==========================================
-- TEST 2: HELPER FUNCTIONS VERIFICATION
-- ==========================================

\echo '‚öôÔ∏è TEST 2: Checking Helper Functions...'

SELECT 
  '‚úÖ HELPER FUNCTIONS:' as test_name,
  COUNT(*) as function_count,
  CASE 
    WHEN COUNT(*) >= 5 THEN '‚úÖ All functions exist'
    ELSE '‚ùå Missing functions'
  END as status
FROM pg_proc p
JOIN pg_namespace n ON p.pronamespace = n.oid
WHERE n.nspname = 'public' 
  AND p.proname IN ('is_super_admin', 'is_admin_or_higher', 'is_instructor_or_higher', 'get_user_role_level', 'can_manage_user');

-- Test function execution
\echo 'üß™ Testing Function Execution...'

DO $$
BEGIN
    -- Test each function
    PERFORM public.is_super_admin();
    PERFORM public.is_admin_or_higher();
    PERFORM public.is_instructor_or_higher();
    PERFORM public.get_user_role_level();
    
    RAISE NOTICE '‚úÖ All helper functions execute successfully';
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Function execution failed: %', SQLERRM;
END $$;

\echo ''

-- ==========================================
-- TEST 3: ROLE CONSTRAINT VERIFICATION
-- ==========================================

\echo 'üîê TEST 3: Checking Role Constraint...'

SELECT 
  '‚úÖ ROLE CONSTRAINT:' as test_name,
  constraint_name,
  CASE 
    WHEN check_clause LIKE '%super_admin%' THEN '‚úÖ super_admin role included'
    ELSE '‚ùå super_admin role missing'
  END as super_admin_status
FROM information_schema.check_constraints 
WHERE constraint_name LIKE '%role%' 
  AND table_name = 'user_profiles'
  AND table_schema = 'public';

\echo ''

-- ==========================================
-- TEST 4: CURRENT USER CONTEXT
-- ==========================================

\echo 'üë§ TEST 4: Current User Context...'

SELECT 
  'üÜî CURRENT USER INFO:' as test_name,
  auth.uid() as user_id,
  CASE 
    WHEN auth.uid() IS NOT NULL THEN '‚úÖ Authenticated'
    ELSE '‚ùå Not authenticated'
  END as auth_status;

-- Get current user's role and permissions
DO $$
DECLARE
    current_role TEXT;
    role_level INTEGER;
    is_super BOOLEAN;
    is_admin BOOLEAN;
    user_count INTEGER;
BEGIN
    -- Get role information
    SELECT role INTO current_role
    FROM public.user_profiles 
    WHERE user_id = auth.uid()
    LIMIT 1;
    
    -- Test helper functions
    is_super := public.is_super_admin();
    is_admin := public.is_admin_or_higher();
    role_level := public.get_user_role_level();
    
    -- Test user access
    SELECT COUNT(*) INTO user_count FROM public.user_profiles;
    
    RAISE NOTICE 'üë§ Current Role: %', COALESCE(current_role, 'Unknown');
    RAISE NOTICE 'üëë Is Super Admin: %', is_super;
    RAISE NOTICE 'üë®‚Äçüíº Is Admin or Higher: %', is_admin;
    RAISE NOTICE 'üìä Role Level: %', role_level;
    RAISE NOTICE 'üë• Can Access % Users', user_count;
    
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Current user context test failed: %', SQLERRM;
END $$;

\echo ''

-- ==========================================
-- TEST 5: ADMIN PANEL QUERY SIMULATION
-- ==========================================

\echo 'üñ•Ô∏è TEST 5: Admin Panel Query Test...'

-- This is the typical query that admin panels use
DO $$
DECLARE
    user_count INTEGER;
    admin_count INTEGER;
    student_count INTEGER;
BEGIN
    -- Test main admin panel query
    SELECT COUNT(*) INTO user_count 
    FROM public.user_profiles 
    ORDER BY created_at DESC;
    
    -- Test filtered queries
    SELECT COUNT(*) INTO admin_count 
    FROM public.user_profiles 
    WHERE role IN ('admin', 'super_admin');
    
    SELECT COUNT(*) INTO student_count 
    FROM public.user_profiles 
    WHERE role = 'student';
    
    RAISE NOTICE '‚úÖ Admin Panel Query: SUCCESS';
    RAISE NOTICE 'üìä Total Users Accessible: %', user_count;
    RAISE NOTICE 'üë®‚Äçüíº Admin Users: %', admin_count;
    RAISE NOTICE 'üë®‚Äçüéì Student Users: %', student_count;
    
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Admin Panel Query: FAILED - %', SQLERRM;
END $$;

\echo ''

-- ==========================================
-- TEST 6: ROLE HIERARCHY TESTING
-- ==========================================

\echo 'üèóÔ∏è TEST 6: Role Hierarchy Testing...'

-- Test role hierarchy levels
SELECT 
  'üìä ROLE HIERARCHY:' as test_name,
  role,
  public.get_user_role_level(user_id) as level,
  COUNT(*) as user_count
FROM public.user_profiles 
GROUP BY role, public.get_user_role_level(user_id)
ORDER BY public.get_user_role_level(user_id) DESC;

-- Test management permissions
DO $$
DECLARE
    test_user_id UUID;
    can_manage BOOLEAN;
BEGIN
    -- Test with a random user
    SELECT user_id INTO test_user_id 
    FROM public.user_profiles 
    WHERE user_id != auth.uid()
    LIMIT 1;
    
    IF test_user_id IS NOT NULL THEN
        can_manage := public.can_manage_user(test_user_id);
        RAISE NOTICE 'üîí Can manage user %: %', test_user_id, can_manage;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è No other users found for management test';
    END IF;
    
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Management permission test failed: %', SQLERRM;
END $$;

\echo ''

-- ==========================================
-- TEST 7: SECURITY VERIFICATION
-- ==========================================

\echo 'üõ°Ô∏è TEST 7: Security Verification...'

-- Check that students can't see admin users
DO $$
DECLARE
    rec RECORD;
BEGIN
    -- This tests if policies are working correctly
    FOR rec IN 
        SELECT role, COUNT(*) as visible_users
        FROM public.user_profiles 
        GROUP BY role
    LOOP
        RAISE NOTICE 'üëÅÔ∏è Visible % users: %', rec.role, rec.visible_users;
    END LOOP;
    
    RAISE NOTICE '‚úÖ Security verification completed';
    
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Security verification failed: %', SQLERRM;
END $$;

\echo ''

-- ==========================================
-- OVERALL HEALTH CHECK
-- ==========================================

\echo 'üè• OVERALL HEALTH CHECK...'

DO $$
DECLARE
    policy_count INTEGER;
    function_count INTEGER;
    super_admin_exists BOOLEAN;
    basic_access_works BOOLEAN := false;
    overall_status TEXT;
BEGIN
    -- Count policies
    SELECT COUNT(*) INTO policy_count
    FROM pg_policies 
    WHERE tablename = 'user_profiles' AND schemaname = 'public';
    
    -- Count functions
    SELECT COUNT(*) INTO function_count
    FROM pg_proc p
    JOIN pg_namespace n ON p.pronamespace = n.oid
    WHERE n.nspname = 'public' 
      AND p.proname IN ('is_super_admin', 'is_admin_or_higher', 'is_instructor_or_higher', 'get_user_role_level', 'can_manage_user');
    
    -- Check super admin exists
    SELECT EXISTS (
        SELECT 1 FROM public.user_profiles WHERE role = 'super_admin'
    ) INTO super_admin_exists;
    
    -- Test basic access
    BEGIN
        PERFORM COUNT(*) FROM public.user_profiles;
        basic_access_works := true;
    EXCEPTION WHEN OTHERS THEN
        basic_access_works := false;
    END;
    
    -- Determine overall status
    IF policy_count >= 5 AND function_count >= 5 AND basic_access_works THEN
        overall_status := '‚úÖ HEALTHY - Admin fix applied successfully';
    ELSE
        overall_status := '‚ùå ISSUES DETECTED - Fix may need reapplication';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE '==============================================';
    RAISE NOTICE 'üè• OVERALL HEALTH CHECK RESULTS:';
    RAISE NOTICE '==============================================';
    RAISE NOTICE 'üìã Policies Created: % (need 5+)', policy_count;
    RAISE NOTICE '‚öôÔ∏è Functions Created: % (need 5+)', function_count;
    RAISE NOTICE 'üëë Super Admin Exists: %', super_admin_exists;
    RAISE NOTICE 'üîì Basic Access Works: %', basic_access_works;
    RAISE NOTICE '';
    RAISE NOTICE 'üìä STATUS: %', overall_status;
    RAISE NOTICE '==============================================';
    
END $$;

\echo ''
\echo 'üéØ VERIFICATION COMPLETE!'
\echo ''
\echo 'If all tests show ‚úÖ, the admin visibility fix is working correctly.'
\echo 'If any tests show ‚ùå, check the troubleshooting section in the README.'
\echo ''

-- ==========================================
-- PERFORMANCE CHECK (OPTIONAL)
-- ==========================================

\echo '‚ö° PERFORMANCE CHECK (Optional)...'

EXPLAIN (ANALYZE, BUFFERS, FORMAT TEXT) 
SELECT user_id, full_name, email, role, created_at
FROM public.user_profiles 
ORDER BY created_at DESC 
LIMIT 100;

\echo ''
\echo 'üìà Performance analysis complete. Check execution time above.'