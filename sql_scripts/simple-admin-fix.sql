-- ==========================================
-- SIMPLE ADMIN USER VISIBILITY FIX
-- ==========================================
-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Admin ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
-- ==========================================

BEGIN;

-- ==========================================
-- STEP 1: ‡∏•‡∏ö policies ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
-- ==========================================

ALTER TABLE public.user_profiles DISABLE ROW LEVEL SECURITY;

-- ‡∏•‡∏ö policies ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
DROP POLICY IF EXISTS "super_admin_full_access" ON public.user_profiles;
DROP POLICY IF EXISTS "own_profile_access" ON public.user_profiles;
DROP POLICY IF EXISTS "admin_view_all_users" ON public.user_profiles;
DROP POLICY IF EXISTS "admin_insert_users" ON public.user_profiles;
DROP POLICY IF EXISTS "admin_update_users" ON public.user_profiles;
DROP POLICY IF EXISTS "admin_delete_users" ON public.user_profiles;
DROP POLICY IF EXISTS "Users can view own profile" ON public.user_profiles;
DROP POLICY IF EXISTS "Public profiles are viewable by everyone" ON public.user_profiles;
DROP POLICY IF EXISTS "Users can insert their own profile" ON public.user_profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON public.user_profiles;

-- ‡∏•‡∏ö functions ‡πÄ‡∏Å‡πà‡∏≤
DROP FUNCTION IF EXISTS public.is_super_admin() CASCADE;
DROP FUNCTION IF EXISTS public.is_admin_or_higher() CASCADE;
DROP FUNCTION IF EXISTS public.get_user_role_level(UUID) CASCADE;

ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;

-- ==========================================
-- STEP 2: ‡πÄ‡∏û‡∏¥‡πà‡∏° super_admin role (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
-- ==========================================

-- ‡∏•‡∏ö constraint ‡πÄ‡∏Å‡πà‡∏≤
ALTER TABLE user_profiles DROP CONSTRAINT IF EXISTS user_profiles_role_check;

-- ‡πÄ‡∏û‡∏¥‡πà‡∏° constraint ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ super_admin
ALTER TABLE user_profiles ADD CONSTRAINT user_profiles_role_check 
CHECK (role IN ('student', 'instructor', 'admin', 'branch_manager', 'super_admin'));

-- ==========================================
-- STEP 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á functions ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
-- ==========================================

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö super admin
CREATE OR REPLACE FUNCTION public.is_super_admin()
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    user_role TEXT;
BEGIN
    SELECT role INTO user_role
    FROM public.user_profiles 
    WHERE user_id = auth.uid();
    
    RETURN COALESCE(user_role = 'super_admin', false);
EXCEPTION WHEN OTHERS THEN
    RETURN false;
END $$;

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö admin ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà student)
CREATE OR REPLACE FUNCTION public.is_admin_or_higher()
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    user_role TEXT;
BEGIN
    SELECT role INTO user_role
    FROM public.user_profiles 
    WHERE user_id = auth.uid();
    
    -- ‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin, branch_manager, instructor, super_admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    -- ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° student
    RETURN COALESCE(user_role IN ('instructor', 'branch_manager', 'admin', 'super_admin'), false);
EXCEPTION WHEN OTHERS THEN
    RETURN false;
END $$;

-- ==========================================
-- STEP 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á RLS policies ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
-- ==========================================

-- 1. Super Admin ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ
CREATE POLICY "super_admin_access" ON public.user_profiles
FOR ALL 
USING (public.is_super_admin())
WITH CHECK (public.is_super_admin());

-- 2. Admin ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin panel) - ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° student
CREATE POLICY "admin_view_all" ON public.user_profiles
FOR SELECT 
USING (public.is_admin_or_higher());

-- 3. Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
CREATE POLICY "admin_insert" ON public.user_profiles
FOR INSERT
WITH CHECK (public.is_admin_or_higher());

-- 4. Admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
CREATE POLICY "admin_update" ON public.user_profiles
FOR UPDATE
USING (public.is_admin_or_higher())
WITH CHECK (public.is_admin_or_higher());

-- 5. Admin ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
CREATE POLICY "admin_delete" ON public.user_profiles
FOR DELETE
USING (public.is_admin_or_higher());

-- 6. ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
CREATE POLICY "own_profile" ON public.user_profiles
FOR ALL 
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- ==========================================
-- STEP 5: ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
-- ==========================================

GRANT EXECUTE ON FUNCTION public.is_super_admin() TO authenticated;
GRANT EXECUTE ON FUNCTION public.is_admin_or_higher() TO authenticated;

-- ==========================================
-- STEP 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á super admin (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
-- ==========================================

-- ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î admin ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô super_admin
UPDATE public.user_profiles 
SET role = 'super_admin' 
WHERE role = 'admin' 
AND user_id = (
    SELECT user_id 
    FROM public.user_profiles 
    WHERE role = 'admin' 
    LIMIT 1
)
AND NOT EXISTS (
    SELECT 1 
    FROM public.user_profiles 
    WHERE role = 'super_admin'
);

-- ==========================================
-- STEP 7: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
-- ==========================================

-- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
SELECT 
  '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô policies:' as info,
  COUNT(*) as count
FROM pg_policies 
WHERE tablename = 'user_profiles';

-- ‡πÅ‡∏™‡∏î‡∏á policies ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
SELECT 
  'üìã Policies ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user_profiles:' as info,
  policyname,
  cmd
FROM pg_policies 
WHERE tablename = 'user_profiles' 
ORDER BY policyname;

-- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
SELECT 
  '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á:' as info,
  COUNT(*) as user_count
FROM public.user_profiles;

SELECT 
  'üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Admin Panel ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß' as status;

COMMIT;