// Clean legacy schedules ‡πÅ‡∏•‡∏∞‡πÇ‡∏¢‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á teaching_schedules table
// ‡∏£‡∏±‡∏ô‡πÉ‡∏ô browser console

async function cleanLegacySchedules() {
  console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...');
  
  try {
    const { supabase } = await import('/src/lib/supabaseClient.js');
    
    // 1. ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    console.log('üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á...');
    
    // ‡∏î‡∏π teaching_schedules table
    const { data: currentSchedules, error: currentError } = await supabase
      .from('teaching_schedules')
      .select('*');
    
    if (currentError) {
      console.error('‚ùå Error reading teaching_schedules:', currentError);
      return;
    }
    
    console.log('üìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô teaching_schedules:', currentSchedules?.length || 0, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    currentSchedules?.forEach(s => {
      console.log(`  - ${s.course_title} (${s.day_of_week}/${s.time_slot_index}) ID: ${s.id}`);
    });
    
    // 2. ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ table ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏´‡∏°
    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ legacy data...');
    
    // ‡∏î‡∏π schedules table (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const { data: legacySchedules, error: legacyError } = await supabase
      .from('schedules')
      .select('*');
    
    if (!legacyError && legacySchedules?.length) {
      console.log('üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô schedules table:', legacySchedules.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      
      // ‡πÇ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å schedules ‡πÑ‡∏õ teaching_schedules
      for (const legacy of legacySchedules) {
        console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${legacy.course?.title || legacy.title || 'Unknown'}`);
        
        const newSchedule = {
          week_start_date: legacy.week_start_date || '2025-08-04',
          day_of_week: legacy.day_of_week || legacy.dayId || 0,
          time_slot_index: legacy.time_slot_index || legacy.timeIndex || 0,
          course_title: legacy.course?.title || legacy.title || legacy.course_title || 'Migrated Course',
          course_code: legacy.course?.code || legacy.code || null,
          instructor_name: legacy.instructor?.name || legacy.instructor_name || 'Unknown',
          room: legacy.room || 'TBD',
          company: legacy.company || 'login'
        };
        
        const { error: insertError } = await supabase
          .from('teaching_schedules')
          .insert(newSchedule);
        
        if (insertError) {
          console.error('‚ùå Error migrating:', insertError.message);
        } else {
          console.log('‚úÖ Migrated successfully');
        }
      }
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å schedules table
      const { error: deleteError } = await supabase
        .from('schedules')
        .delete()
        .neq('id', null);
      
      if (!deleteError) {
        console.log('üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å schedules table ‡πÅ‡∏•‡πâ‡∏ß');
      }
    } else {
      console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô schedules table');
    }
    
    // 3. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà UUID)
    console.log('\nüóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö...');
    
    // ‡∏´‡∏≤ record ‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà UUID format
    const invalidRecords = currentSchedules?.filter(s => 
      s.id && !s.id.includes('-') && !isNaN(parseInt(s.id))
    );
    
    console.log('üîç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:', invalidRecords?.length || 0, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    
    for (const invalid of invalidRecords || []) {
      console.log(`üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ID: ${invalid.id} (${invalid.course_title})`);
      
      // ‡πÉ‡∏ä‡πâ RPC function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÅ‡∏ö‡∏ö raw SQL
      const { error: deleteError } = await supabase.rpc('delete_invalid_schedule', {
        schedule_id: invalid.id.toString()
      });
      
      if (deleteError) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ:', deleteError.message);
      } else {
        console.log('‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    }
    
    // 4. ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    console.log('\nüîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö...');
    setTimeout(() => {
      window.location.reload();
    }, 2000);
    
    console.log('\nüéâ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤...');
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    
    // Manual cleanup ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    console.log('\nüìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö manual:');
    console.log('1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Supabase Dashboard SQL Editor');
    console.log('2. ‡∏£‡∏±‡∏ô SQL ‡∏ô‡∏µ‡πâ:');
    console.log(`
-- ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà UUID format
DELETE FROM teaching_schedules 
WHERE id::text ~ '^[0-9]+$';

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
SELECT * FROM teaching_schedules ORDER BY created_at DESC;
    `);
    
    const sql = `DELETE FROM teaching_schedules WHERE id::text ~ '^[0-9]+$';`;
    await navigator.clipboard.writeText(sql);
    console.log('üìã SQL ‡∏ñ‡∏π‡∏Å copy ‡πÅ‡∏•‡πâ‡∏ß!');
    
    window.open('https://supabase.com/dashboard/project/vuitwzisazvikrhtfthh/sql/new', '_blank');
  }
}

// ‡∏£‡∏±‡∏ô function
cleanLegacySchedules();