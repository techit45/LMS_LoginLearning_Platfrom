// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ legacy IDs ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î UUID parsing error
// Copy ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡πÉ‡∏ô browser console

async function fixLegacyIDs() {
  console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ legacy IDs...');
  
  try {
    const { supabase } = await import('/src/lib/supabaseClient.js');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç...');
    
    const { data: allSchedules, error: fetchError } = await supabase
      .from('teaching_schedules')
      .select('*');
    
    if (fetchError) {
      console.error('‚ùå Error fetching schedules:', fetchError);
      throw fetchError;
    }
    
    console.log(`üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${allSchedules?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡∏´‡∏≤ records ‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const legacyRecords = allSchedules?.filter(s => {
      const id = s.id?.toString();
      return id && /^\d+$/.test(id); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    }) || [];
    
    console.log(`üéØ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö: ${legacyRecords.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    legacyRecords.forEach(record => {
      console.log(`  - ID: ${record.id} (${record.course_title})`);
    });
    
    // 2. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    for (const record of legacyRecords) {
      console.log(`üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö ID: ${record.id}...`);
      
      try {
        // ‡πÉ‡∏ä‡πâ raw SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö
        const { error: deleteError } = await supabase
          .from('teaching_schedules')
          .delete()
          .eq('id', record.id);
        
        if (deleteError) {
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö ID ${record.id}:`, deleteError.message);
          
          // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ RPC ‡πÅ‡∏ó‡∏ô
          console.log('üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ RPC function...');
          const { error: rpcError } = await supabase.rpc('exec_sql', {
            sql: `DELETE FROM teaching_schedules WHERE id::text = '${record.id}';`
          });
          
          if (rpcError) {
            console.error('‚ùå RPC ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:', rpcError.message);
          } else {
            console.log('‚úÖ ‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢ RPC ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
          }
        } else {
          console.log('‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        }
      } catch (error) {
        console.error(`üí• Error deleting ID ${record.id}:`, error);
      }
    }
    
    // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï week_start_date
    console.log('\nüìÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï week_start_date...');
    const targetDate = '2025-08-04';
    
    const { error: updateError } = await supabase
      .from('teaching_schedules')
      .update({ week_start_date: targetDate })
      .neq('week_start_date', targetDate);
    
    if (updateError) {
      console.error('‚ùå Error updating week_start_date:', updateError);
    } else {
      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï week_start_date ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\nüìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...');
    
    const { data: finalSchedules, error: finalError } = await supabase
      .from('teaching_schedules')
      .select('*')
      .eq('week_start_date', targetDate)
      .order('day_of_week')
      .order('time_slot_index');
    
    if (finalError) {
      console.error('‚ùå Error checking final data:', finalError);
    } else {
      console.log(`‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ${targetDate}: ${finalSchedules?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      finalSchedules?.forEach(s => {
        console.log(`  - ${s.course_title} (‡∏ß‡∏±‡∏ô ${s.day_of_week}, ‡∏ä‡πà‡∏ß‡∏á ${s.time_slot_index}) ID: ${s.id}`);
      });
    }
    
    // 5. ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
    console.log('\nüîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...');
    console.log('üéâ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä drag & drop ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!');
    
    setTimeout(() => {
      window.location.reload();
    }, 2000);
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    
    // ‡πÅ‡∏™‡∏î‡∏á Manual SQL fix
    console.log('\nüìã ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô SQL ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Supabase Dashboard:');
    
    const manualSQL = `-- ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
DELETE FROM teaching_schedules WHERE id::text ~ '^[0-9]+$';

-- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï week_start_date
UPDATE teaching_schedules 
SET week_start_date = '2025-08-04'
WHERE week_start_date != '2025-08-04';

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
SELECT id, course_title, day_of_week, time_slot_index, week_start_date 
FROM teaching_schedules 
WHERE week_start_date = '2025-08-04'
ORDER BY day_of_week, time_slot_index;`;
    
    console.log(manualSQL);
    
    try {
      await navigator.clipboard.writeText(manualSQL);
      console.log('üìã SQL copied to clipboard!');
    } catch (e) {
      console.log('‚ö†Ô∏è Manual copy required');
    }
    
    window.open('https://supabase.com/dashboard/project/vuitwzisazvikrhtfthh/sql/new', '_blank');
  }
}

// ‡∏£‡∏±‡∏ô function
fixLegacyIDs();