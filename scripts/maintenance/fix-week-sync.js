// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Week Date Sync ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á real-time system ‡πÅ‡∏•‡∏∞ database
// ‡∏£‡∏±‡∏ô‡πÉ‡∏ô browser console

async function fixWeekSync() {
  console.log('üìÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Week Date Sync...');
  
  try {
    const { supabase } = await import('/src/lib/supabaseClient.js');
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö distribution ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log('üìä Week distribution ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    const { data: weekDist } = await supabase
      .from('teaching_schedules')
      .select('week_start_date, course_title')
      .order('week_start_date');
    
    const groupedByWeek = weekDist?.reduce((acc, item) => {
      const week = item.week_start_date;
      if (!acc[week]) acc[week] = [];
      acc[week].push(item.course_title);
      return acc;
    }, {});
    
    console.log('üìÖ Week groups:');
    Object.entries(groupedByWeek || {}).forEach(([week, courses]) => {
      console.log(`  ${week}: ${courses.length} courses - ${courses.slice(0, 3).join(', ')}${courses.length > 3 ? '...' : ''}`);
    });
    
    // 2. ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    console.log('\nüîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ 2 ‡∏ß‡∏¥‡∏ò‡∏µ:');
    console.log('1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å 2025-08-04 ‡πÄ‡∏õ‡πá‡∏ô 2025-08-03 (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)');
    console.log('2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å 2025-08-03 ‡πÄ‡∏õ‡πá‡∏ô 2025-08-04');
    
    // 3. ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (2025-08-04 ‚Üí 2025-08-03)
    console.log('\nüéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ä‡πâ 2025-08-03');
    
    const updateToOld = await supabase
      .from('teaching_schedules')
      .update({ week_start_date: '2025-08-03' })
      .eq('week_start_date', '2025-08-04');
    
    if (updateToOld.error) {
      console.error('‚ùå Update failed:', updateToOld.error);
    } else {
      console.log(`‚úÖ Updated ${updateToOld.count || 'some'} records to 2025-08-03`);
    }
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\nüìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:');
    const { data: afterUpdate } = await supabase
      .from('teaching_schedules')
      .select('week_start_date, count(*)')
      .group('week_start_date');
      
    console.table(afterUpdate);
    
    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö real-time load
    console.log('\nüîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö real-time load...');
    const { data: realtimeTest } = await supabase
      .from('teaching_schedules')
      .select('*')
      .eq('week_start_date', '2025-08-03')
      .eq('company', 'login');
    
    console.log(`üéâ Real-time ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î: ${realtimeTest?.length || 0} schedules`);
    
    if (realtimeTest?.length > 2) {
      console.log('‚úÖ UI ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß!');
      console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå');
      
      // Auto refresh
      setTimeout(() => {
        window.location.reload();
      }, 3000);
    }
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    
    // Manual SQL
    console.log('üìã ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô SQL ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Supabase:');
    const sql = `UPDATE teaching_schedules 
SET week_start_date = '2025-08-03' 
WHERE week_start_date = '2025-08-04';`;
    
    console.log(sql);
    
    try {
      await navigator.clipboard.writeText(sql);
      console.log('üìã SQL copied to clipboard!');
    } catch (e) {
      console.log('‚ö†Ô∏è Manual copy required');
    }
  }
}

// ‡∏£‡∏±‡∏ô function
fixWeekSync();