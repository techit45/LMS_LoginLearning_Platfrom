// Script ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Teaching Schedule
// ‡∏£‡∏±‡∏ô‡πÉ‡∏ô browser console ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Teaching Schedule

console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Teaching Schedule...');

async function checkAndFixIssues() {
  try {
    const supabase = window.supabase;
    
    if (!supabase) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Supabase client');
      return;
    }

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication
    console.log('\n1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Authentication...');
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login ‡∏´‡∏£‡∏∑‡∏≠ session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏');
      console.log('üîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡πÉ‡∏´‡∏°‡πà');
      return;
    }
    
    console.log('‚úÖ Authenticated as:', user.email);
    console.log('   User ID:', user.id);
    console.log('   Role:', user.role);

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á table
    console.log('\n2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á teaching_schedules table...');
    const { data: testSelect, error: selectError } = await supabase
      .from('teaching_schedules')
      .select('*')
      .limit(1);
    
    if (selectError) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å table:', selectError.message);
      if (selectError.code === '42501') {
        console.log('‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ RLS policies - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } else {
      console.log('‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    }

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö INSERT
    console.log('\n3Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ INSERT...');
    const testData = {
      week_start_date: '2025-08-04',
      day_of_week: 1,
      time_slot_index: 2,
      course_title: 'TEST_INSERT_' + Date.now(),
      instructor_name: 'Test Teacher',
      company: 'login',
      created_by: user.id,
      updated_by: user.id
    };

    const { data: insertData, error: insertError } = await supabase
      .from('teaching_schedules')
      .insert(testData)
      .select()
      .single();

    if (insertError) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ INSERT:', insertError.message);
      if (insertError.code === '42501') {
        console.log('‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ RLS policies - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      } else if (insertError.code === '23514') {
        console.log('‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ constraint - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö time_slot_index');
      }
    } else {
      console.log('‚úÖ INSERT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ID:', insertData.id);
      
      // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö UPDATE
      console.log('\n4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ UPDATE...');
      const { error: updateError } = await supabase
        .from('teaching_schedules')
        .update({ course_title: 'TEST_UPDATE_' + Date.now() })
        .eq('id', insertData.id);

      if (updateError) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ UPDATE:', updateError.message);
      } else {
        console.log('‚úÖ UPDATE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }

      // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö DELETE
      console.log('\n5Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ DELETE...');
      const { error: deleteError } = await supabase
        .from('teaching_schedules')
        .delete()
        .eq('id', insertData.id);

      if (deleteError) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ DELETE:', deleteError.message);
      } else {
        console.log('‚úÖ DELETE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    }

    // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Real-time subscription
    console.log('\n6Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Real-time subscription...');
    const channel = supabase
      .channel('test-channel')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: 'teaching_schedules' },
        (payload) => {
          console.log('üì° Real-time event:', payload);
        }
      )
      .subscribe((status) => {
        console.log('üì° Subscription status:', status);
      });

    setTimeout(() => {
      supabase.removeChannel(channel);
      console.log('üßπ Cleaned up test subscription');
    }, 5000);

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ
    console.log('\n' + '='.repeat(50));
    console.log('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:');
    console.log('='.repeat(50));
    
    if (insertError || updateError || deleteError) {
      console.log('\n‚ùå ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ RLS Policies');
      console.log('\nüîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
      console.log('1. Copy SQL ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ:');
      console.log('');
      
      const fixSQL = `-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS policies
DROP POLICY IF EXISTS "authenticated_users_can_view_schedules" ON teaching_schedules;
DROP POLICY IF EXISTS "admins_can_manage_schedules" ON teaching_schedules;

CREATE POLICY "anyone_can_view_schedules" ON teaching_schedules 
FOR SELECT USING (true);

CREATE POLICY "authenticated_can_insert_schedules" ON teaching_schedules 
FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "authenticated_can_update_schedules" ON teaching_schedules 
FOR UPDATE USING (auth.role() = 'authenticated');

CREATE POLICY "authenticated_can_delete_schedules" ON teaching_schedules 
FOR DELETE USING (auth.role() = 'authenticated');`;

      console.log(fixSQL);
      console.log('');
      console.log('2. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà: https://supabase.com/dashboard/project/vuitwzisazvikrhtfthh/sql/new');
      console.log('3. ‡∏ß‡∏≤‡∏á SQL ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å Run');
      console.log('4. Refresh ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ');
      
      // Copy SQL ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      if (navigator.clipboard) {
        await navigator.clipboard.writeText(fixSQL);
        console.log('\nüìã SQL ‡∏ñ‡∏π‡∏Å copy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á clipboard ‡πÅ‡∏•‡πâ‡∏ß!');
      }
      
      // ‡πÄ‡∏õ‡∏¥‡∏î Supabase Dashboard
      const openDashboard = confirm('‡πÄ‡∏õ‡∏¥‡∏î Supabase Dashboard ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS policies?');
      if (openDashboard) {
        window.open('https://supabase.com/dashboard/project/vuitwzisazvikrhtfthh/sql/new', '_blank');
      }
    } else {
      console.log('\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!');
      console.log('   - Authentication: OK');
      console.log('   - SELECT: OK');
      console.log('   - INSERT: OK');
      console.log('   - UPDATE: OK');
      console.log('   - DELETE: OK');
      console.log('\nüéâ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô drag & drop ‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥');
    }

  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  }
}

// ‡∏£‡∏±‡∏ô function
checkAndFixIssues();