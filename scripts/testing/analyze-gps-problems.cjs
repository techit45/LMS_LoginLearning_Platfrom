const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  'https://vuitwzisazvikrhtfthh.supabase.co', 
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ1aXR3emlzYXp2aWtyaHRmdGhoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzOTU4ODIsImV4cCI6MjA2Njk3MTg4Mn0.VXCqythCUualJ7S9jVvnQUYe9BKnfMvbihtZT5c3qyE'
);

async function analyzeProblems() {
  console.log('üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö GPS ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');
  console.log('==========================================');
  
  // 1. Test Foreign Key Relationships
  console.log('\n1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Foreign Key Relationships:');
  
  // Test user_registered_locations -> company_locations
  console.log('\nüìã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö user_registered_locations -> company_locations:');
  const { data: regData, error: regError } = await supabase
    .from('user_registered_locations')
    .select('*, location:company_locations(*)')
    .limit(1);
    
  if (regError) {
    console.log('‚ùå ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£ join company_locations:');
    console.log('   Error:', regError.message);
    console.log('   Code:', regError.code);
    console.log('   Details:', regError.details);
    console.log('   Hint:', regError.hint);
  } else {
    console.log('‚úÖ ‡∏Å‡∏≤‡∏£ join ‡∏Å‡∏±‡∏ö company_locations ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
  }
  
  // Test user_registered_locations -> user_profiles  
  console.log('\nüë§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö user_registered_locations -> user_profiles:');
  const { data: userData, error: userError } = await supabase
    .from('user_registered_locations')
    .select('*, user:user_profiles(*)')
    .limit(1);
    
  if (userError) {
    console.log('‚ùå ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£ join user_profiles:');
    console.log('   Error:', userError.message);
    console.log('   Code:', userError.code);
    console.log('   Details:', userError.details);
    console.log('   Hint:', userError.hint);
  } else {
    console.log('‚úÖ ‡∏Å‡∏≤‡∏£ join ‡∏Å‡∏±‡∏ö user_profiles ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
  }
  
  // 2. Check RLS Policies
  console.log('\n2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Row Level Security (RLS):');
  
  const tables = ['user_registered_locations', 'time_entries', 'company_locations'];
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);
        
      if (error) {
        console.log(`‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${table}:`);
        console.log(`   Error: ${error.message}`);
        console.log(`   Code: ${error.code}`);
      } else {
        console.log(`‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${table}: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ`);
      }
    } catch (err) {
      console.log(`‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${table}: ${err.message}`);
    }
  }
  
  // 3. Test Authentication Requirements
  console.log('\n3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Authentication Requirements:');
  
  const { data: currentUser, error: authError } = await supabase.auth.getUser();
  
  if (authError) {
    console.log('‚ùå Authentication Error:');
    console.log('   Error:', authError.message);
    console.log('   üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Node.js ‡πÑ‡∏°‡πà‡∏°‡∏µ user session');
  } else if (!currentUser.user) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ user session (‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å server)');
    console.log('   üí° ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ authenticated user ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô');
  } else {
    console.log('‚úÖ User authenticated:', currentUser.user.email);
  }
  
  // 4. Test GPS Service Functions
  console.log('\n4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GPS Functions (‡∏à‡∏≥‡∏•‡∏≠‡∏á):');
  
  // Test distance calculation
  const centerLat = 13.79115977;
  const centerLng = 100.49675596;
  const userLat = 13.79205977;
  const userLng = 100.49675596;
  
  // Haversine formula
  const R = 6371e3;
  const œÜ1 = centerLat * Math.PI / 180;
  const œÜ2 = userLat * Math.PI / 180;
  const ŒîœÜ = (userLat - centerLat) * Math.PI / 180;
  const ŒîŒª = (userLng - centerLng) * Math.PI / 180;
  const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
            Math.cos(œÜ1) * Math.cos(œÜ2) *
            Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const distance = R * c;
  
  console.log(`üìê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á:`);
  console.log(`   ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏±‡∏î: ${centerLat}, ${centerLng}`);
  console.log(`   ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userLat}, ${userLng}`);
  console.log(`   ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á: ${Math.round(distance)} ‡πÄ‡∏°‡∏ï‡∏£`);
  console.log(`   ${distance <= 100 ? '‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' : '‚ùå ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏£‡∏±‡∏®‡∏°‡∏µ'} (‡∏£‡∏±‡∏®‡∏°‡∏µ: 100m)`);
  
  // 5. Check for Missing Data
  console.log('\n5Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢:');
  
  const counts = {};
  const tables2 = ['user_profiles', 'user_registered_locations', 'time_entries', 'company_locations'];
  
  for (const table of tables2) {
    try {
      const { count, error } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });
        
      if (!error) {
        counts[table] = count;
        console.log(`üìä ${table}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${count === 0 ? '‚ö†Ô∏è' : '‚úÖ'}`);
      } else {
        console.log(`‚ùå ${table}: Error - ${error.message}`);
      }
    } catch (err) {
      console.log(`‚ùå ${table}: ${err.message}`);
    }
  }
  
  // 6. Analyze Critical Issues
  console.log('\n6Ô∏è‚É£ ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ß‡∏¥‡∏Å‡∏§‡∏ï:');
  
  const issues = [];
  
  if (counts['user_profiles'] === 0) {
    issues.push('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö - ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á user profiles');
  }
  
  if (counts['user_registered_locations'] === 0) {
    issues.push('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏î‡πÜ - ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô');
  }
  
  if (counts['time_entries'] === 0) {
    issues.push('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ - ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á');
  }
  
  if (userError && userError.message.includes('relationship')) {
    issues.push('‚ùå Foreign key relationship ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ - ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç schema');
  }
  
  if (issues.length === 0) {
    console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ß‡∏¥‡∏Å‡∏§‡∏ï - ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
  } else {
    console.log('‚ö†Ô∏è ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    issues.forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue}`);
    });
  }
  
  console.log('\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:');
  console.log('   1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
  console.log('   2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå');
  console.log('   3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô');
  console.log('   4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á RLS policies');
}

analyzeProblems().catch(console.error);