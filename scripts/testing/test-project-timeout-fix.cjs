const { createClient } = require('@supabase/supabase-js');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á supabase client
const supabase = createClient(
  'https://vuitwzisazvikrhtfthh.supabase.co', 
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ1aXR3emlzYXp2aWtyaHRmdGhoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzOTU4ODIsImV4cCI6MjA2Njk3MTg4Mn0.VXCqythCUualJ7S9jVvnQUYe9BKnfMvbihtZT5c3qyE'
);

async function testTimeoutFix() {
  console.log('üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Database Query Timeout');
  console.log('===============================================');

  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏°‡∏µ retry)
    console.log('\n1Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Query ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°:');
    const start1 = Date.now();
    
    const simpleQueryPromise = supabase
      .from('projects')
      .select('id, title, is_approved, is_featured')
      .eq('is_approved', true)
      .eq('is_featured', true)
      .limit(3);
    
    const timeoutPromise1 = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Query timeout after 10s')), 10000)
    );
    
    try {
      const { data: simpleData, error: simpleError } = await Promise.race([simpleQueryPromise, timeoutPromise1]);
      const duration1 = Date.now() - start1;
      
      console.log(`‚ö° Query time: ${duration1}ms`);
      console.log(`üìä Results: ${simpleData?.length || 0} projects`);
      
      if (simpleError) {
        console.log(`‚ùå Error: ${simpleError.message}`);
      } else {
        console.log('‚úÖ Query ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (timeoutError) {
      const duration1 = Date.now() - start1;
      console.log(`‚è∞ Timeout after ${duration1}ms: ${timeoutError.message}`);
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö retry mechanism
    console.log('\n2Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Retry Mechanism:');
    
    const start2 = Date.now();
    let queryAttempt = 0;
    let lastError = null;
    let data = null;
    
    while (queryAttempt < 3 && !data) {
      queryAttempt++;
      console.log(`üîÑ Attempt ${queryAttempt}/3`);
      
      try {
        const queryPromise = supabase
          .from('projects')
          .select(`
            id,
            title,
            short_description,
            category,
            difficulty_level,
            technology,
            demo_url,
            thumbnail_url,
            created_at,
            view_count,
            like_count
          `)
          .eq('is_approved', true)
          .eq('is_featured', true)
          .order('created_at', { ascending: false })
          .limit(6);
        
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Database query timeout')), 20000)
        );
        
        const { data: queryData, error } = await Promise.race([queryPromise, timeoutPromise]);

        if (error) {
          lastError = error;
          console.warn(`‚ö†Ô∏è Attempt ${queryAttempt} failed: ${error.message}`);
          
          if (error.message.includes('timeout') || error.message.includes('network') || queryAttempt < 3) {
            await new Promise(resolve => setTimeout(resolve, 1000 * queryAttempt));
            continue;
          }
          throw error;
        }

        if (queryData) {
          data = queryData;
          console.log(`‚úÖ Query succeeded on attempt ${queryAttempt}`);
          lastError = null;
          break;
        }

      } catch (attemptError) {
        lastError = attemptError;
        console.warn(`‚ö†Ô∏è Attempt ${queryAttempt} failed: ${attemptError.message}`);
        
        if (queryAttempt >= 3 || (!attemptError.message.includes('timeout') && !attemptError.message.includes('network'))) {
          break;
        }
        
        await new Promise(resolve => setTimeout(resolve, 1000 * queryAttempt));
      }
    }

    const duration2 = Date.now() - start2;
    console.log(`‚ö° Total time with retries: ${duration2}ms`);

    if (data && data.length > 0) {
      console.log(`‚úÖ Final result: ${data.length} featured projects`);
      console.log(`üéØ Sample: "${data[0].title}"`);
    } else if (lastError) {
      console.log(`‚ùå All attempts failed: ${lastError.message}`);
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö mock data fallback
    console.log('\n3Ô∏è‚É£ Mock Data Fallback:');
    
    const mockProjects = [
      {
        id: 'mock-proj-1',
        title: '‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ IoT',
        short_description: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏î‡∏¥‡∏ô',
        category: 'IoT/Hardware',
        difficulty_level: 'intermediate',
        technology: ['Arduino', 'ESP32', 'React Native'],
        demo_url: '#',
        thumbnail_url: 'https://images.unsplash.com/photo-1466611653911-95081537e5b7?w=400',
        created_at: new Date().toISOString(),
        view_count: 234,
        like_count: 18
      }
    ];

    console.log(`üé≠ Mock projects available: ${mockProjects.length}`);
    console.log(`üìù Sample mock: "${mockProjects[0].title}"`);

    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    console.log('\n4Ô∏è‚É£ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
    
    console.log('‚úÖ Improvements ‡∏ó‡∏µ‡πà‡∏ó‡∏≥:');
    console.log('   - ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÄ‡∏õ‡πá‡∏ô 20-30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏à‡∏≤‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)');
    console.log('   - ‡πÄ‡∏û‡∏¥‡πà‡∏° retry mechanism 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    console.log('   - ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á retry (1s, 2s, 3s)');
    console.log('   - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á error logging');
    console.log('   - ‡∏•‡∏î log spam ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mock data');
    
    console.log('\nüéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:');
    if (data && data.length > 0) {
      console.log('   ‚úÖ Database query ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ');
      console.log('   ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏∂‡πà‡∏á mock data');
    } else {
      console.log('   üé≠ ‡πÉ‡∏ä‡πâ mock data ‡πÄ‡∏õ‡πá‡∏ô fallback');
      console.log('   üí° Homepage ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠');
    }

  } catch (error) {
    console.error('‚ùå Test error:', error.message);
  }
}

testTimeoutFix().catch(console.error);